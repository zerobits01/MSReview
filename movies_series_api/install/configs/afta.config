server {
    listen 80;
    listen [::]:80;
    server_name _;
    return 301 https://$host$request_uri;
}

server {

    ##############################################################################

        # Sendfile copies data between one FD and other from within the kernel.
        # More efficient than read() + write(), since the requires transferring
        # data to and from the user space.

        sendfile on;

        # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
        # packet, instead of using partial frames. This is useful for prepending
        # headers before calling sendfile, or for throughput optimization.
        tcp_nopush on;


        # don't buffer data-sends (disable Nagle algorithm). Good for sending
        # frequent small bursts of data in real time.

        tcp_nodelay on;

        types_hash_max_size 2048;

    ##############################################################################
        # Gzip Settings

        gzip off;
        #gzip_disable "MSIE [1-6]\.";
        #gzip_vary on;
        #gzip_proxied any;
        #gzip_comp_level 6;
        #gzip_min_length 256;
        #gzip_buffers 16 8k;
        #gzip_http_version 1.1;
        #gzip_types
        #    application/atom+xml
        #    application/javascript
        #    application/json
        #    application/ld+json
        #    application/manifest+json
        #    application/rss+xml
        #    application/vnd.geo+json
        #    application/vnd.ms-fontobject
        #    application/x-font-ttf
        #    application/x-web-app-manifest+json
        #    application/xhtml+xml
        #    application/xml
        #    font/opentype
        #    image/bmp
        #    image/svg+xml
        #    image/x-icon
        #    text/cache-manifest
        #    text/css
        #    text/plain
        #    text/vcard
        #    text/vnd.rim.location.xloc
        #    text/vtt
        #    text/x-component
        #    text/x-cross-domain-policy;



    ##############################################################################
        # Performance configuration

        client_body_buffer_size 1000M;
        client_header_buffer_size 1k;
        client_max_body_size 1000M;
        large_client_header_buffers 4 4k;
        client_body_timeout 140;
        client_header_timeout 12;
        keepalive_timeout 30;
        keepalive_requests 10000;
        send_timeout 2;


        ##
        # Allow the server to close the connection after a client stops
        # responding.
        # Frees up socket-associated memory.
        ##
        reset_timedout_connection on;


        ##
        # Open file descriptors.
        # Caches information about open FDs, freqently accessed files.
        ##
        open_file_cache max=200000 inactive=20s;
        open_file_cache_valid 30s;
        open_file_cache_min_uses 2;
        open_file_cache_errors on;



    ##############################################################################

        # SSL configuration
        listen 443 ssl http2; # default_server
        listen [::]:443 ssl http2; # default_server
        include snippets/self-signed.conf;
        include snippets/ssl-params.conf;


    ##############################################################################



    # Use analytics to track stuff instead of using precious file IO resources.
    # Disabling logging speeds up IO.

    access_log off;


    error_log      /var/log/nginx/error.log error;

    location = favicon.ico { access_log off; log_not_found off; }


    root /opt/ui/build;

    rewrite ^/?.*/static/(.+)$ /static/$1 last;
    # rewrite ^/?.*/static/(?(?!admin))+$ /static/$1 last;

    location / {
        index index.html index.htm;
        try_files $uri /index.html =404;
    }

    location /capi/ {
        proxy_pass http://localhost:8080;
        proxy_redirect default;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /static/admin {
        proxy_pass http://localhost:8000;
        proxy_redirect default;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }



    location /api {
        proxy_pass http://localhost:8000;
        proxy_redirect default;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /gapi/ {
        proxy_pass http://localhost:5000;
        proxy_redirect default;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
